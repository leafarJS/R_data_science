diamonds %>%
filter(carat < 3) %>%
mutate(carat = fct_reorder(as.factor(carat), price)) %>%
ggplot(aes(
carat,
price,
group = cut.number(carat, 20)
))+
geom_boxplot()+
coord_flip()
diamonds %>%
filter(carat < 3) %>%
ggplot(aes(
carat,
price,
group = cut_width(carat, 0.25)
))+
geom_boxplot()
diamonds %>%
filter(carat < 3) %>%
ggplot(aes(
carat,
price,
group =cut_number(carat, 20)
))+
geom_boxplot()+
coord_flip()
diamonds %>%
filter(carat < 3) %>%
ggplot(aes(
carat,
price,
group =cut_number(carat, 20)
))+
geom_boxplot()
view(diamonds)
diamonds %>%
mutate(price_X_carat = price/carat) %>%
view()
diamonds %>%
mutate(price_X_carat = carat/price) %>%
view()
diamonds %>%
mutate(price_X_carat = carat/price) %>%
count(cut, price_X_carat) %>%
diamonds %>%
mutate(price_X_carat = carat/price) %>%
count(cut, price_X_carat)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
view()
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(price_X_carat))
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n))
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n))< %>%
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 60)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
cut,
n
))+
geom_freqpoly()
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
cut,
n
))+
geom_freqpoly(binwindt = 0.5)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
cut,
n
))+
geom_freqpoly(binwidth = 0.5)
))+
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
cut
))+
geom_freqpoly(binwidth = 0.5)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n
))+
geom_freqpoly(binwidth = 0.5)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n
))+
geom_freqpoly(binwidth = 10)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n
))+
geom_freqpoly(binwidth = 100)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n
))+
geom_freqpoly(binwidth = 0.01)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n
))+
geom_freqpoly(binwidth = 0.02)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n,
group =cut
))+
geom_freqpoly(binwidth = 0.02)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n,
))+
geom_histogram(binwidth = 0.02)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n,
))+
geom_histogram()
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n,
))+
geom_histogram(binwidth = 5)
diamonds %>%
mutate(price_X_carat = carat/price) %>%
group_by(cut, price_X_carat) %>%
count(cut, price_X_carat) %>%
arrange(desc(n)) %>%
filter(n > 40) %>%
ggplot(aes(
n,
))+
geom_histogram(binwidth = 3)
diamonds %>%
ggplot(aes(
x,
z
))+
coord_cartesian(xlim = c(4,11), ylim = c(4,11))
diamonds %>%
ggplot(aes(
x,
z
))+
coord_cartesian()
diamonds %>%
ggplot(aes(
x,
y
))+
coord_cartesian()
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11)
data(faithful)
str(faithful)
faithful %>%
ggplot(aes(
eruptions,
waiting
))+
geom_point()
faithful %>%
ggplot(aes(
eruptions,
waiting
))+
geom_point()+
geom_smooth()
install.packages("modelr")
#install.packages("modelr")
library(modelr)
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat))) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid
))+
geom_point()
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat), diamonds)) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid
))+
geom_point()
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat), diamonds)) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid
))+
geom_boxplot()
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat), diamonds)) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid,
group = cut
))+
geom_boxplot()
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat), diamonds)) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid,
group = carat
))+
geom_boxplot()
diamonds %>%
add_residuals(mod = lm(log(price)~log(carat), diamonds)) %>%
mutate(resid = exp(resid)) %>%
ggplot(aes(
carat,
resid,
group = cut
))+
geom_boxplot()
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(clarity, cut, fill = n)) +
geom_tile()
# Tibbles
library(tidyverse)
as_tibble(iris)
tibble(
x = 1:5,
y = 1,
z = x ^ 2 + y
)
tibble(
`:)` = "smile",
`:0` = "awesome",
`2000` = "number"
)
tribble(
~x, ~y, ~z,
#--|--|----|
"a", 2, 3.6,
"b", 1, 8.5
)
library(lubridate)
tibble(
a = now() + runif(1e3) * 86400,
b = today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
library(nycflights13)
flights %>%
print(n = 10, width = Inf)
tibble(
x = runif(5),
y = rnorm(5)
)
x <- tibble(
x = runif(5),
y = rnorm(5)
)
x %>% .$x
x %>% [[x]]
x %>% .[[x]]
x %>% .[["x"]]
x
rlang::last_error()
x %>% .$x
x %>% .[["x"]]
class(as.data.frame(x))
# ejercicios
class(mtcars)
class(as.tibble(mtcars))
class(as_tibble(mtcars))
x = data.frame(abc = 1, xyz = "a")
x$x
x[, "xyz"]
x[, c("abc", "xyz")]
x <- tibble(
abc = 1,
xyz = "a"
)
x$x
x[, "xyz"]
x[, c("abc", "xyz")]
x = .abc
x = .$abc
x = [.$abc]
x = .$abc
x %>%  .$abc
# Importación de datos
library(tidyverse)
data <- read_csv("database/horror_movie_0.csv")
read_csv(
"a,b,c
1,2,3
4,5,6")
read_csv("The first line of metadata
The second line of metadata
x,y,z
1,2,3", skip = 2)
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
read_csv("1,2,3\n4,5,6", col_names = FALSE)
# PASAR NOMBRES A LAS COLUMNAS
read_csv("1,2,3\n4,5,6", col_names = c("x", "y", "z"))
#DATOS FALTANTES
read_csv("a,b,c\n1,2,.", na = ".")
# ANALISIS
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,.\n1,2,3\n4,5,6", na =".")
read_csv("a,b,c\n1,2\n1,2,3,4")
#read_csv("a,b,c\n1,2\n1,2,3,4") # NO TIENE LA MISMA DIMENSION
read_csv("a,b,c,.\n1,2,.,.\n1,2,3,4", na = ".")
#read_csv("a,b,c\n1,2\n1,2,3,4") # NO TIENE LA MISMA DIMENSION
read_csv("a,b,c,d\n1,2,.,.\n1,2,3,4", na = ".")
read_csv("a,b\n\"1", "." na = ".")
read_csv("a,b\n\"1, ." na = ".")
read_csv("a,b\n\1, ." na = ".")
read_csv("a,b\n\1,.", na = ".")
read_csv("a,b\n1,2\na,b")
#read_csv("a;b\n1;3") NO ERA EL FORMATO ADECUDO
read_csv2("a;b\n1;3")
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1977-03-02")))
parse_integer(c("123", "345", "abc", "123.45"))
#informa de fallas en la conversión si un dato no concuerda
x <- parse_integer(c("123", "345", "abc", "123.45"))
problems(x)
# numeros
parse_double("1,23")
parse_double("1,23", locale = locale(decimal_mark = "."))
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_mumber("20%")
parse_number("20%")
parse_number("el costo es $123.45")
parse_number("$123,456,789")
parse_number("123.456.789", locale = locale(grouping_mark = "."))
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
charToRaw("jorge")
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
x <- c("apple", "banana", "orange")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
# fechas, fechas-horas y horas
parse_datetime()
# fechas, fechas-horas y horas
parse_datetime("2010-10-01T2010")
# Si se omite la hora, se establecerá en la medianoche.
parse_datetime("20101010")
parse_date("2010-10-01")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_Date("77/03/02", "%y/%m/%m")
parse_Date("77/03/02", "%m/%d/%y")
parse_Date("03/02/77", "%m/%d/%y")
parse_Date("03/02/1977", "%m/%d/%y")
parse_date("77/03/02", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
guess_parser("2010-10-01") #> [1] "date"
guess_parser("15:01") #> [1] "time"
guess_parser(c("TRUE", "FALSE")) #> [1] "logical"
guess_parser(c("1", "5", "9")) #> [1] "double"
guess_parser(c("12,352,561")) #> [1] "number"
str(parse_guess("2010-10-10"))#>  Date[1:1], format: "2010-10-10"
challenge <- read_csv(readr_example("challenge.csv"))
challenge <- read_csv(readr_example("challenge.csv"));challenge
problems(challenge)
head(challenge)
tail(challenge)
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_logical()
)
)
head(challenge)
tail(challenge)
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
head(challenge)
tail(challenge)
challenge <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
head(challenge)
tail(challenge)
challenge
challenge <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character())
)
challenge
write_rds(challenge, "challenge.rds")
read_rds("challenge.rds")
#lenguaje binario de programación
library(feather)
#lenguaje binario de programación
install.packages("feather")
#install.packages("feather")
library(feather)
write_feather(challenge, "challenge.feather")
read_feather("challenge.feather")
